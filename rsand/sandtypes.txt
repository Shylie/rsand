baseclass Tile
- void Tick(int i, int j, World& world)
- Color TypeColor()
= long clock

subclass Air implements Tile
- void Tick(int i, int j, World& world)
{
	clock = -1;
}
- Color TypeColor()
{
	return BLANK;
}

subclass Sand implements Tile
- void Tick(int i, int j, World& world)
{
	if (j > 0)
	{
		if (world.At(i, j - 1).clock < 0 || world.At(i, j - 1).type == Tile::Type::Fire)
		{
			world.At(i, j - 1) = Sand(world.Clock() + 1);
			world.At(i, j) = Air(-1);
			return;
		}
		else if (world.At(i, j - 1).type == Tile::Type::Water)
		{
			world.At(i, j - 1) = Sand(world.Clock() + 1);
			world.At(i, j) = Water(world.Clock() + 1);
			return;
		}
		else if (i > 0 && (world.At(i - 1, j).clock < 0 || world.At(i - 1, j).type == Tile::Type::Fire) && (world.At(i - 1, j - 1).clock < 0 || world.At(i - 1, j - 1).type == Tile::Type::Fire))
		{
			world.At(i - 1, j - 1) = Sand(world.Clock() + 1);
			world.At(i, j) = Air(-1);
			return;
		}
		else if (i > 0 && (world.At(i - 1, j).clock < 0 || world.At(i - 1, j).type == Tile::Type::Water || world.At(i - 1, j).type == Tile::Type::Fire) && world.At(i - 1, j - 1).type == Tile::Type::Water)
		{
			world.At(i - 1, j - 1) = Sand(world.Clock() + 1);
			world.At(i, j) = (world.At(i - 1, j).clock < 0 ? Air(-1) : Water(world.Clock() + 1));
			world.At(i - 1, j) = Water(world.Clock() + 1);
			return;
		}
		else if (i < world.WIDTH - 1 && (world.At(i + 1, j).clock < 0 || world.At(i + 1, j).type == Tile::Type::Fire) && (world.At(i + 1, j - 1).clock < 0 || world.At(i + 1, j - 1).type == Tile::Type::Fire))
		{
			world.At(i + 1, j - 1) = Sand(world.Clock() + 1);
			world.At(i, j) = Air(-1);
			return;
		}
		else if (i < world.WIDTH - 1 && (world.At(i + 1, j).clock < 0 || world.At(i + 1, j).type == Tile::Type::Water || world.At(i + 1, j).type == Tile::Type::Fire) && world.At(i + 1, j - 1).type == Tile::Type::Water)
		{
			world.At(i + 1, j - 1) = Sand(world.Clock() + 1);
			world.At(i, j) = (world.At(i + 1, j).clock < 0 ? Air(-1) : Water(world.Clock() + 1));
			world.At(i + 1, j) = Water(world.Clock() + 1);
			return;
		}
	}
	clock++;
}
- Color TypeColor()
{
	return Color{ 237, 201, 175, 255 };
}

subclass Stone implements Tile
- void Tick(int i, int j, World& world)
{
	if (j < world.HEIGHT - 1 && world.At(i, j + 1).type == Tile::Type::Water)
	{
		if (erosion == 0)
		{
			world.At(i, j) = Sand(world.Clock() + 1);
			return;
		}
		else if (erosion > 0)
		{
			erosion--;
		}
	}
	clock++;
}
- Color TypeColor()
{
	return Color{ static_cast<unsigned char>(180 - Min(Max(erosion, 0), 10) * 10), static_cast<unsigned char>(180 - Min(Max(erosion, 0), 10) * 10), static_cast<unsigned char>(180 - Min(Max(erosion, 0), 10) * 10), 255 };
}
= int erosion

subclass Water implements Tile
- void Tick(int i, int j, World& world)
{
	if (j > 0)
	{
		if (world.At(i, j - 1).clock < 0)
		{
			world.At(i, j - 1) = Water(world.Clock() + 1);
			world.At(i, j) = Air(-1);
			return;
		}
		bool left = true;
		bool right = true;
		for (int offset = 0; offset < Max(i + 1, world.WIDTH - i); offset++)
		{
			if (left && i - offset >= 0) { left = world.At(i - offset, j - 1).type == Tile::Type::Water || world.At(i - offset, j - 1).clock < 0; }
			if (left && i - offset >= 0 && world.At(i - offset, j - 1).clock < 0)
			{
				world.At(i - offset, j - 1) = Water(world.Clock() + 1);
				world.At(i, j) = Air(-1);
				return;
			}
			if (right && i + offset < world.WIDTH) { right = world.At(i + offset, j - 1).type == Tile::Type::Water || world.At(i + offset, j - 1).clock < 0; }
			if (right && i + offset < world.WIDTH && world.At(i + offset, j - 1).clock < 0)
			{
				world.At(i + offset, j - 1) = Water(world.Clock() + 1);
				world.At(i, j) = Air(-1);
				return;
			}
		}
	}
	clock++;
}
- Color TypeColor()
{
	return BLUE;
}

subclass Plant implements Tile
- void Tick(int i, int j, World& world)
{
	if (i > 0)
	{
		switch (world.At(i - 1, j).type)
		{
		case Tile::Type::Water:
			if (energy < 100)
			{
				world.At(i - 1, j) = Air(-1);
				energy += 13;
			}
			break;

		case Tile::Type::Plant:
			if (rand() % 6 > 1 && energy > 5 && energy > world.At(i - 1, j).energy)
			{
				world.At(i - 1, j).energy += 4;
				energy -= 4;
			}
			break;
		}
	}
	if (i < world.WIDTH - 1)
	{
		switch (world.At(i + 1, j).type)
		{
		case Tile::Type::Water:
			if (energy < 100)
			{
				world.At(i + 1, j) = Air(-1);
				energy += 13;
			}
			break;

		case Tile::Type::Plant:
			if (rand() % 6 > 1 && energy > 5 && energy > world.At(i + 1, j).energy)
			{
				world.At(i + 1, j).energy += 4;
				energy -= 4;
			}
			break;
		}
	}
	if (j > 0)
	{
		switch (world.At(i, j - 1).type)
		{
		case Tile::Type::Water:
			if (energy < 100)
			{
				world.At(i, j - 1) = Air(-1);
				energy += 13;
			}
			break;

		case Tile::Type::Plant:
			if (rand() % 6 > 1 && energy > 5 && energy > world.At(i, j - 1).energy)
			{
				world.At(i, j - 1).energy += 4;
				energy -= 4;
			}
			break;
		}
	}
	if (j < world.HEIGHT - 1)
	{
		switch (world.At(i, j + 1).type)
		{
		case Tile::Type::Water:
			if (energy < 100)
			{
				world.At(i, j + 1) = Air(-1);
				energy += 13;
			}
			break;

		case Tile::Type::Plant:
			if (rand() % 6 > 1 && energy > 5 && energy > world.At(i, j + 1).energy)
			{
				world.At(i, j + 1).energy += 4;
				energy -= 4;
			}
			break;
		}
	}
	int neighbors = 0;
	for (int di = -1; di <= 1; di++)
	{
		for (int dj = -1; dj <= 1; dj++)
		{
			if (i + di >= 0 && i + di < world.WIDTH && j + dj >= 0 && j + dj < world.WIDTH && world.At(i + di, j + dj).type == Tile::Type::Plant)
			{
				neighbors++;
			}
		}
	}
	if (neighbors < 5 && energy >= 50)
	{
		switch (rand() % 4)
		{
		case 0:
			if (i > 0 && world.At(i - 1, j).clock < 0)
			{
				world.At(i - 1, j) = Plant(world.Clock(), 10);
				energy -= 50;
			}
			break;
			
		case 1:
			if (i < world.WIDTH - 1 && world.At(i + 1, j).clock < 0)
			{
				world.At(i + 1, j) = Plant(world.Clock(), 10);
				energy -= 50;
			}
			break;

		case 2:
			if (j > 0 && world.At(i, j - 1).clock < 0)
			{
				world.At(i, j - 1) = Plant(world.Clock(), 10);
				energy -= 50;
			}
			break;
			
		case 3:
			if (j < world.HEIGHT - 1 && world.At(i, j + 1).clock < 0)
			{
				world.At(i, j + 1) = Plant(world.Clock(), 10);
				energy -= 50;
			}
			break;
		}
	}
	if (energy < -10)
	{
		world.At(i, j) = Stone(world.Clock(), -1);
	}
	else
	{
		if (clock++ % (rand() % 51 + 50) == 0)
		{
			energy--;
		}
	}
}
- Color TypeColor()
{
	return Color{ 0, static_cast<unsigned char>(150 + Min(Max(energy, -10), 100)), 0, 255 };
}
= int energy

subclass Fire implements Tile
- void Tick(int i, int j, World& world)
{
	if (lifetime >= 0)
	{
		lifetime--;

		for (int di = -1; di <= 1; di++)
		{
			for (int dj = -1; dj <= 1; dj++)
			{
				if (i + di >= 0 && i + di < world.WIDTH && j + dj >= 0 && j + dj < world.WIDTH)
				{
					switch (world.At(i + di, j + dj).type)
					{
					case Tile::Type::Plant:
						lifetime += Min(75, Max(world.At(i + di, j + dj).data.Plant.energy, 15));
						world.At(i + di, j + dj) = Fire(world.Clock() + 1, lifetime / 2 - 1);
						break;

					case Tile::Type::Water:
						lifetime -= 5;
						break;
					}
				}
			}
		}

		if (lifetime % (rand() % 6 + 5) == 0)
		{
			int di = rand() % 3 - 1;
			int dj = rand() % 3;
			if (i + di >= 0 && i + di < world.WIDTH && j + dj >= 0 && j + dj < world.HEIGHT && world.At(i + di, j + dj).clock < 0)
			{
				world.At(i + di, j + dj) = Fire(world.Clock() + 1, lifetime / 2 - 1);
			}
		}
	}
	else
	{
		world.At(i, j) = Air(-1);
	}
}
- Color TypeColor()
{
	return Color{ static_cast<unsigned char>(250 - Min(Max(0, lifetime), 50)), static_cast<unsigned char>(170 - Min(Max(0, lifetime), 50) * 2), 20, 255 };
}
= int lifetime

